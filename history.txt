+df$cash_price23 + df$cash_price24))
cashPerOrder
library(tidyverse)
library(dplyr)
library(ggplot2)
#install.packages("GGally")
library(GGally)
# Every row of ID is unique, setting this as the index.
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv")
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
# df
# df<- read.csv("Datasets/X_test_8skS2ey.csv", row.names = "ID")
# df
# Merge based on the "ID" column
merged_data <- merge(xTrainData, yTrainData, by.x = "ID", by.y = "index", all.x = TRUE)
merged_data
merged_data$ID<- NULL
merged_data
feature_names <- colnames(merged_data)
feature_names
colnames(merged_data)[colnames(merged_data) == "ID.y"] <- "ID"
# Set "ID" as the row names
rownames(merged_data) <- merged_data$ID
duplicated_ids <- duplicated(merged_data$ID)
# Check for duplicates in xTrainData
duplicated_ids_x <- duplicated(xTrainData$ID)
print(xTrainData[duplicated_ids_x, ])
# Check for duplicates in yTrainData
duplicated_ids_y <- duplicated(yTrainData$ID)
print(yTrainData[duplicated_ids_y, ])
df <- merge(xTrainData,yTrainData,by="ID", all = TRUE)
glimpse(df)
summary(df)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
library(ggplot2)
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv")
xTrainData
yTrainData <- read_csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv", row.names = "ID")
yTrainData
yTrainData <- yTrainData$fraud_flag
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv", row.names = "ID")
yTrainData
yTrainData <- data.frame(yTrainData$fraud_flag)
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv", row.names = "ID")
yTrainData
yTrainData <- data.frame(yTrainData$fraud_flag, row.names = "ID")
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
yTrainData <- data.frame(yTrainData$fraud_flag, row.names = "ID")
yTrainData
colnames(yTrainData)
yTrainData <- data.frame(yTrainData$fraud_flag)
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
yTrainData <- yTrainData %>%
select(ID, fraud_flag) %>%
arrange(ID) %>%
column_to_rownames(var = "ID")
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
# Assuming yTrainData is your data frame
yTrainData <- yTrainData %>%
select(ID, fraud_flag) %>%
arrange(ID)
# Set "ID" as row names
rownames(yTrainData) <- yTrainData$ID
# Keep only the "fraud_flag" column
yTrainData <- yTrainData[, "fraud_flag", drop = FALSE]
# Remove the "ID" column
yTrainData <- yTrainData[, -1]
# Print the modified data frame
print(yTrainData)
# Print the modified data frame
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
# Assuming yTrainData is your data frame
yTrainData <- yTrainData %>%
select(ID, fraud_flag) %>%
arrange(ID)
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
# Assuming yTrainData is your data frame
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
yTrainData
# Set "ID" as row names
rownames(yTrainData) <- yTrainData$ID
yTrainData
# Keep only the "fraud_flag" column
yTrainData <- yTrainData[, "fraud_flag", drop = FALSE]
yTrainData
yTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData
# Assuming yTrainData is your data frame
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
yTrainData
# Set "ID" as row names
rownames(yTrainData) <- yTrainData$ID
yTrainData
# Keep only the "fraud_flag" column
yTrainData <- yTrainData[, "fraud_flag", drop = FALSE]
yTrainData
# Print the modified data frame
yTrainData
View(yTrainData)
# Print the modified data frame
yTrainData
View(yTrainData)
head(yTrainData)
colnames(yTrainData)
unique(yTrainData$fraud_flag)
yTrainData %>%
group_by(fraud_flag) %>%
count()
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
setwd("C:/Users/Sharon/Documents/GitHub/Programs/Detecting_Fraudsters_ML")
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
# Initialize an empty array to store average fraud_flag values
average_fraud_flag <- numeric()
# Print the updated frequency_df
print(frequency_df)
frequency_df
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
colnames(frequency_df) <- c("Value", "Frequency")
setwd("C:/Users/Sharon/Documents/GitHub/Programs/Detecting_Fraudsters_ML")
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
glimpse(xTrainData)
library(tidyverse)
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
glimpse(xTrainData)
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
xTrainData
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
# Replace empty strings with NA
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData
# Apply table function across all columns, ignoring NA values
frequency_table <- table(unlist(apply(xTrainData[, paste0("item", 1:24)], 2, function(x) na.omit(as.character(x)))))
# Convert the table to a data frame for better handling
frequency_df <- as.data.frame(frequency_table)
colnames(frequency_df) <- c("Value", "Frequency")
frequency_df
# Define the value to search for
search_value <- "WOMENS CLOTHES"
# Create a subset of train_data where the value appears in the item1 column
subset_data <- train_data[train_data$item1 == search_value, ]
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
rownames(yTrainData) <- yTrainData$ID
yTrainData <- yTrainData[, "fraud_flag", drop = FALSE]
train_data <- cbind(xTrainData, y = yTrainData)
train_data
# Apply table function across all columns, ignoring NA values
frequency_table <- table(unlist(apply(xTrainData[, paste0("item", 1:24)], 2, function(x) na.omit(as.character(x)))))
# Convert the table to a data frame for better handling
frequency_df <- as.data.frame(frequency_table)
colnames(frequency_df) <- c("Value", "Frequency")
frequency_df
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Create an empty data frame to store the subset
subset_data <- data.frame()
# Loop over columns with names containing the word "item"
for (col in grep("^item", names(train_data), value = TRUE)) {
# Create a subset of train_data where the value appears in the current column
subset_col <- train_data[train_data[, col] == search_value, ]
# Append the subset to the result data frame
subset_data <- rbind(subset_data, subset_col)
}
# Remove duplicates from the final subset
subset_data <- unique(subset_data)
# Print or further process the subset_data as needed
print(subset_data)
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
columns_to_search
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Create an empty data frame to store the subset
subset_data <- data.frame()
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
subset_col <- train_data[train_data[, col] == search_value, ]
# Append the subset to the result data frame
subset_data <- rbind(subset_data, subset_col)
}
# Remove duplicates from the final subset
subset_data <- unique(subset_data)
# Print or further process the subset_data as needed
print(subset_data)
# Print or further process the subset_data as needed
print(subset_data)
View(subset_data)
View(subset_data)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
#subset_data <- train_data[train_data[col] == search_value, ]
print(train_data[col])
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
# Create a subset of train_data where the value appears in the current column
#subset_data <- train_data[train_data[col] == search_value, ]
data <- (train_data[col])
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
#subset_data <- train_data[train_data[col] == search_value, ]
data <- (train_data[col])
print(data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(data)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
subset_data <- train_data[train_data[col] == search_value, ]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(subset_data)
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Create an empty data frame to store the subset
subset_data <- data.frame()
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[rowSums(train_data[, columns_to_search] == search_value, na.rm = TRUE) > 0, ]
#subset_data <- train_data[train_data[col] == search_value, ]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(subset_data)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[,col] == search_value, ]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(subset_data)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[,col] == search_value]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[col] == search_value,]
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[col] == search_value,]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[col,] == search_value]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[,col] == search_value]
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[,col] == search_value,]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
#subset_data <- train_data[train_data[,col] == search_value,]
subset_data <- train_data %>%
filter(rowSums(select(., columns_to_search) == search_value, na.rm = TRUE) > 0)
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(subset_data)
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Create an empty data frame to store the subset
subset_data <- data.frame()
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data[train_data[,col] == search_value,]
#data <- (train_data[col])
print(subset_data)
# Append the subset to the result data frame
#subset_data <- rbind(subset_data, subset_col)
}
View(subset_data)
# Load the dplyr package
library(dplyr)
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Create an empty data frame to store the subset
subset_data <- data.frame()
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
# Loop over columns with names containing the word "item"
for (col in columns_to_search) {
# Create a subset of train_data where the value appears in the current column
subset_col <- train_data %>% filter(.data[[col]] == search_value)
# Append the subset to the result data frame
subset_data <- bind_rows(subset_data, subset_col)
}
# Remove duplicates from the final subset
subset_data <- unique(subset_data)
# Print or further process the subset_data as needed
print(subset_data)
View(subset_data)
# Load the dplyr package
library(dplyr)
# Define the value to search for
search_value <- "SCHOOL WEAR"
# Define the list of columns to search through
columns_to_search <- paste0("item", 1:24)
# Create a subset of train_data where the search_value is present in any of the specified columns
subset_data <- train_data %>%
filter(across(all_of(columns_to_search), ~. == search_value) %>% rowSums(na.rm = TRUE) > 0)
# Remove duplicates from the final subset
subset_data <- unique(subset_data)
# Print or further process the subset_data as needed
print(subset_data)
# Define the value to search for
search_value <- "WOMENS CLOTHES"
# Create a subset of train_data where the value appears in the item1 column
subset_data <- train_data[train_data$item1 == search_value, ]
# Print or further process the subset_data as needed
print(subset_data)
# Define the value to search for
search_value <- "WOMENS CLOTHES"
# Create a subset of train_data where the value appears in the item1 or item2 columns
subset_data <- train_data[train_data$item1 == search_value | train_data$item2 %in% search_value, ]
# Print or further process the subset_data as needed
print(subset_data)
# Define the value to search for
search_value <- "WOMENS CLOTHES"
columns_to_search <- grep("item", names(train_data), value = TRUE)
# Create a subset of train_data where the value appears in the item1 or item2 columns
#subset_data <- train_data[train_data$item1 == search_value | train_data$item2 %in% search_value, ]
subset_data <- train_data[apply(train_data[columns_to_search], 1, function(row) any(row %in% search_value)), ]
# Print or further process the subset_data as needed
print(subset_data)
View(subset_data)
View(subset_data)
# Calculate the average of the fraud_flag column in subset_data
average_fraud_flag <- mean(subset_data$fraud_flag)
# Print the average
print(average_fraud_flag)
# Define the value to search for
search_value <- "WOMENS CLOTHES"
columns_to_search <- grep("item", names(train_data), value = TRUE)
# Create a subset of train_data where the value appears in the item1 or item2 columns
#subset_data <- train_data[train_data$item1 == search_value | train_data$item2 %in% search_value, ]
subset_data <- train_data[apply(train_data[columns_to_search], 1, function(row) any(row %in% search_value)), ]
# Print or further process the subset_data as needed
print(subset_data)
# Calculate the average of the fraud_flag column in subset_data
average_fraud_flag <- round(mean(subset_data$fraud_flag), 4)
# Print the average
print(average_fraud_flag)
# Initialize an empty list to store the average fraud_flag values
average_fraud_flags <- list()
# Loop through each search value
for (search_value in frequency_df$Value) {
# Create a subset of train_data for the current search value
subset_data <- train_data[apply(train_data[columns_to_search], 1, function(row) any(row %in% search_value)), ]
# Calculate the average of the fraud_flag column and round to 4 decimal places
average_fraud_flag <- round(mean(subset_data$fraud_flag), 4)
# Add the result to the list
average_fraud_flags[[search_value]] <- average_fraud_flag
}
# Print the list of average_fraud_flags
print(average_fraud_flags)
# Add the list of average_fraud_flag to frequency_df as a new column
frequency_df$average_fraud_flag <- sapply(frequency_df$search_value, function(search_value) average_fraud_flags[[search_value]])
xTrainData <- read.csv("Datasets/X_train_G3tdtEn.csv",row.names = "ID")
xTrainData <- apply(xTrainData, 2, function(x) ifelse(x == "", NA, x))
yTrainData <- read.csv("Datasets/Y_train_2_XPXJDyy.csv")
yTrainData <- yTrainData %>%
select(ID, fraud_flag)
rownames(yTrainData) <- yTrainData$ID
yTrainData <- yTrainData[, "fraud_flag", drop = FALSE]
train_data <- cbind(xTrainData, y = yTrainData)
train_data
# Apply table function across all columns, ignoring NA values
frequency_table <- table(unlist(apply(xTrainData[, paste0("item", 1:24)], 2, function(x) na.omit(as.character(x)))))
# Convert the table to a data frame for better handling
frequency_df <- as.data.frame(frequency_table)
colnames(frequency_df) <- c("Value", "Frequency")
frequency_df
# Add the list of average_fraud_flag to frequency_df as a new column
frequency_df$average_fraud_flag <- sapply(frequency_df$Value, function(search_value) average_fraud_flags[[search_value]])
# Print the updated frequency_df
print(frequency_df)
write.csv(frequency_df, "feature_engineering/unique_item_counts_fraud_flag.csv", row.names = FALSE)
# Create a scatter plot of frequency vs average_fraud_flag
ggplot(frequency_df, aes(x = Frequency, y = average_fraud_flag)) +
geom_point() +
labs(title = "Scatter Plot of Frequency vs Average Fraud Flag",
x = "Frequency",
y = "Average Fraud Flag")
# Create a scatter plot of frequency vs average_fraud_flag
ggplot(frequency_df, aes(x = Frequency, y = average_fraud_flag)) +
geom_point() +
labs(title = "Scatter Plot of Item Frequency vs Average Fraud Flag",
x = "Frequency",
y = "Average Fraud Flag")
### For Make
# Apply table function across all columns, ignoring NA values
frequency_table <- table(unlist(apply(xTrainData[, paste0("make", 1:24)], 2, function(x) na.omit(as.character(x)))))
# Convert the table to a data frame for better handling
frequency_df <- as.data.frame(frequency_table)
colnames(frequency_df) <- c("Value", "Frequency")
frequency_df
# Initialize an empty list to store the average fraud_flag values
average_fraud_flags <- list()
# Loop through each search value
for (search_value in frequency_df$Value) {
# Create a subset of train_data for the current search value
subset_data <- train_data[apply(train_data[columns_to_search], 1, function(row) any(row %in% search_value)), ]
# Calculate the average of the fraud_flag column and round to 4 decimal places
average_fraud_flag <- round(mean(subset_data$fraud_flag), 4)
# Add the result to the list
average_fraud_flags[[search_value]] <- average_fraud_flag
}
# Print the list of average_fraud_flags
print(average_fraud_flags)
### For Make
# Apply table function across all columns, ignoring NA values
frequency_table <- table(unlist(apply(xTrainData[, paste0("make", 1:24)], 2, function(x) na.omit(as.character(x)))))
frequency_table
# Convert the table to a data frame for better handling
frequency_df <- as.data.frame(frequency_table)
colnames(frequency_df) <- c("Value", "Frequency")
frequency_df
# Initialize an empty list to store the average fraud_flag values
average_fraud_flags <- list()
history
savehistory("~/GitHub/Programs/Detecting_Fraudsters_ML/history.txt")
