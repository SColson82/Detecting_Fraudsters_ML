6/3
6/4
x<-8
x
meMat <- matrix(1:6, nrow=3, ncol = 2)
meMat
meMat[,2]
meMat[2,]
x <- 1:10
x
cls
clear
y = log(x)
y
x*y
z = x*y
z
mean(z)
objects()
rm(x,y)
objects()
uciCar <- read.table('car.data.csv', sep = ',', header=T)
uciCar <- read.table(file.choose(), sep = ',', header=T)
uciCar <- read.table(file.choose(), sep = ',', header=T)
summary(uciCar)
uciGerBan <- read.table(file.choose(), sep = ',', header=T)
rm uciGerBan
print(uciGerBan)
print(uciGerBan[1:3])
print(uciGerBan[1:3],)
print(uciGerBan[1:3,])
colnames(d) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
colnames(uciGerBan) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
colnames(uciGerBan) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
View(uciGerBan)
newData0 <- read.table(file.choose(), sep = ',', header=T)
newData0 <- read.table(file.choose(), sep = ',', header=T)
newData0 <- read.table(file.choose(), header=T)
uciGerBan <- read.table(file.choose(), sep = ' ', header=T)
colnames(uciGerBan) <- c('Status.of.existing.checking.account',
'Duration.in.month', 'Credit.history', 'Purpose',
'Credit.amount', 'Savings account/bonds',
'Present.employment.since',
'Installment.rate.in.percentage.of.disposable.income',
'Personal.status.and.sex', 'Other.debtors/guarantors',
'Present.residence.since', 'Property', 'Age.in.years',
'Other.installment.plans', 'Housing',
'Number.of.existing.credits.at.this.bank', 'Job',
'Number.of.people.being.liable.to.provide.maintenance.for',
'Telephone', 'foreign.worker', 'Good.Loan')
View(uciGerBan)
rm Data
rm(Data)
rm(meMat)
rm(z)
probs = matrix(c(11, 99, 3, 887), 2, 2, byrow = TRUE,
dimnames = list(c("M-True", "M-False"),
c("C-True", "C-False")))
View(probs)
View(probs)
library(MASS)
catz = data(cats)
force(cats)
catz = data('cats')
force(cats)
data('cats')
cats
install.packages("readr")
library(readr)
challenge <- read_csv(readr_example("challenge.csv"))
spec()
problems(challenge)
View(challenge)
install.packages(RMySQL)
install.packages('RMySQL')
library(RMySQL)
curData <- read.table(file.choose(), sep = ',', header=T)
View(curData)
View(curData)
boxplot(curData)
boxplot(data = curData)
boxplot(Murder~Assault,data = curData)
boxplot(Murder~UrbanPop,data = curData)
boxplot(Assault~UrbanPop,data = curData)
boxplot(Murder~UrbanPop,data = curData)
boxplot(Murder~Assault,data = curData)
boxplot(Murder~UrbanPop,data = curData)
plot(Murder~UrbanPop,data = curData)
plot(Assault~UrbanPop,data = curData)
n_distinct()
n_distinct(curData)
plot(Murder~UrbanPop,data = curData)
cusData <- read.table(file.choose(), sep = ',', header=T)
View(cusData)
View(cusData)
cusData <- read.table(file.choose(), sep = '.', header=T)
cusData <- read.table(file.choose(), sep = '\t', header=T)
summary(cusData)
curData <- read.table(file.choose(), sep = ',', header=T)
View(curData)
View(curData)
summary(curData)
dataDate = curData('3/17/2020')
day_data <- curData |> filter(date == '3/17/2020')
day_data <- curData |> filter(date is '3/17/2020')
day_data <- curData |> filter(date.equals('3/17/2020')
;
day_data <- curData |> filter(date == '3/17/2020')
day_data <- curData |> filter(date == '3/17/2020')
day_data <- curData |> filter(date == '03/17/2020')
library(ggplot2)
install.packages('tidyburst')
install.packages('tidyverse')
install.packages('ggplot')
library(ggplot2)
library(tidyverse)
day_data <- curData |> filter(date == '03/17/2020')
days_data <- curData |> filter(date > '03/17/2020' || date < '03/27/2020')
covid$date <- mdy(covid$date)
curData$date <- mdy(curData$date)
#date_vec <- c("3/17/2020", "3/18/202", "3/19/2020", "3/20/2020", "3/21/2020","3/22/2020","3/23/2020","3/24/2020","3/25/2020","3/26/2020")
extend_date <- subset(curData, curData$date > 3/16/2020 & curData$date < 3/27/2020)
extend_date
model <- lm(y~x)
y = [276, 43, 82, 136, 417, 269]
y = (276, 43, 82, 136, 417, 269)
y <- (276, 43, 82, 136, 417, 269)
y <- c(276, 43, 82, 136, 417, 269)
x <- c(7,3,4,6,10,9)
model <- lm(y~x)
View(model)
View(model)
plot(x,y, ylab = "Time spent (seconds)", xlab = "num friends")
coefs = coef(model)
abline(coefs[1], coefs[2])
summary(model)
load("C:/Users/gavmc/Downloads/NatalRiskData.rData")
train <- sdata[sdata$ORIGRANDGROUP<=5,]
test <- sdata[sdata$ORIGRANDGROUP>5,]
print(fmla)
library(ggplot2)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
install.packages("ROCR", dep = T)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
install.packages("ROCR", dep = T)
package(ROCR)
packages(ROCR)
install.packages(ROCR)
install.packages('ROCR')
install.packages("ROCR")
install.packages("ROCR")
detach("package:ROCR", unload = TRUE)
install.packages("ROCR")
library(ROCR)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
install.packages("ROCR", dep = T)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
install.packages("plyr")
library(plyr)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
install.packages("nlme")
library(nlme)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
source("C:/Users/gavmc/Downloads/logistic_regression.R", echo=TRUE)
file <- "binary_class_dataset.txt"
set <- read.table(file, header = TRUE, sep = "\t")
names(set)
split <- .65
set["rand"] <- runif(nrow(set))
train <- set[(set$rand <= split), ]
test <- set[(set$rand > split), ]
set$Y <- set$Y_BUY
library(mgcv)
plotrel <- function(x, y, b, title) {
# Produce a GAM smoothed representation of the data
g <- gam(as.formula("y ~ x"), family = "binomial", data = set)
xs <- seq(min(x), max(x), length = 200)
p <- predict(g, newdata = data.frame(x = xs), type = "response")
# Now get empirical estimates (and discretize if non discrete)
if (length(unique(x)) > b) {
div <- floor(max(x) / b)
x_b <- floor(x / div) * div
c <- table(x_b, y)
}
else { c <- table(x, y) }
pact <- c[ , 2]/(c[ , 1]+c[, 2])
cnt <- c[ , 1]+c[ , 2]
xd <- as.integer(rownames(c))
plot(xs, p, type="l", main=title,ylab = "P(Conversion | Ad, X)", xlab="X")
points(xd, pact, type="p", col="red")
rug(x+runif(length(x)))
}
library(plyr)
getmae <- function(p, y, b, title, doplot) {
# Normalize to interval [0,1]
max_p <- max(p)
p_norm <- p / max_p
# break up to b bins and rescale
bin <- max_p * floor(p_norm * b) / b
d <- data.frame(bin, p, y)
t <- table(bin)
summ <- ddply(d, .(bin), summarise, mean_p = mean(p), mean_y = mean(y))
fin <- data.frame(bin = summ$bin, mean_p = summ$mean_p, mean_y = summ$mean_y, t)
# Get wMAE
num = 0
den = 0
for (i in c(1:nrow(fin))) {
num <- num + fin$Freq[i] * abs(fin$mean_p[i] - fin$mean_y[i])
den <- den + fin$Freq[i]
}
wmae <- num / den
if (doplot == 1) {
plot(summ$bin, summ$mean_p, type = "p",
main = paste(title," MAE =", wmae),
col = "blue", ylab = "P(C | AD, X)",
xlab = "P(C | AD, X)")
points(summ$bin, summ$mean_y, type = "p", col = "red")
rug(p)
}
return(wmae)
}
install.packages("ROCR",dep=T)
install.packages("ROCR", dep = T)
file <- "binary_class_dataset.txt"
set <- read.table(file, header = TRUE, sep = "\t")
names(set)
split <- .65
set["rand"] <- runif(nrow(set))
train <- set[(set$rand <= split), ]
test <- set[(set$rand > split), ]
set$Y <- set$Y_BUY
library(mgcv)
plotrel <- function(x, y, b, title) {
# Produce a GAM smoothed representation of the data
g <- gam(as.formula("y ~ x"), family = "binomial", data = set)
xs <- seq(min(x), max(x), length = 200)
p <- predict(g, newdata = data.frame(x = xs), type = "response")
# Now get empirical estimates (and discretize if non discrete)
if (length(unique(x)) > b) {
div <- floor(max(x) / b)
x_b <- floor(x / div) * div
c <- table(x_b, y)
}
else { c <- table(x, y) }
pact <- c[ , 2]/(c[ , 1]+c[, 2])
cnt <- c[ , 1]+c[ , 2]
xd <- as.integer(rownames(c))
plot(xs, p, type="l", main=title,ylab = "P(Conversion | Ad, X)", xlab="X")
points(xd, pact, type="p", col="red")
rug(x+runif(length(x)))
}
library(plyr)
getmae <- function(p, y, b, title, doplot) {
# Normalize to interval [0,1]
max_p <- max(p)
p_norm <- p / max_p
# break up to b bins and rescale
bin <- max_p * floor(p_norm * b) / b
d <- data.frame(bin, p, y)
t <- table(bin)
summ <- ddply(d, .(bin), summarise, mean_p = mean(p), mean_y = mean(y))
fin <- data.frame(bin = summ$bin, mean_p = summ$mean_p, mean_y = summ$mean_y, t)
# Get wMAE
num = 0
den = 0
for (i in c(1:nrow(fin))) {
num <- num + fin$Freq[i] * abs(fin$mean_p[i] - fin$mean_y[i])
den <- den + fin$Freq[i]
}
wmae <- num / den
if (doplot == 1) {
plot(summ$bin, summ$mean_p, type = "p",
main = paste(title," MAE =", wmae),
col = "blue", ylab = "P(C | AD, X)",
xlab = "P(C | AD, X)")
points(summ$bin, summ$mean_y, type = "p", col = "red")
rug(p)
}
return(wmae)
}
install.packages("ROCR",dep=T)
install.packages("ROCR", dep = T)
install.packages("ROCR", dep = T)
newYTrain <- c(na.omit(df2$ID, df2$fraud_flag))
detach("package:ROCR", unload = TRUE)
library(ROCR)
newYTrain <- c(na.omit(df2$ID, df2$fraud_flag))
df2 <- read.csv("Y_train_2_XPXJDyy.csv", row.names = "ID")
library(ROCR)
setwd("C:/Users/gavmc/Documents/Detecting_Fraudsters_ML/Datasets")
print(getwd())
xtrain <- read.csv("X_train_G3tdtEn.csv")
xtest <- read.csv("X_test_8skS2ey.csv")
ytrain <- read.csv("Y_train_2_XPXJDyy.csv")
ytest <- read.csv("Y_test_random_2.csv")
summary(xtrain)
summary(ytrait)
summary(xtest)
summary(ytest)
df <- read.csv("X_train_G3tdtEn.csv", row.names = "ID")
df
df2 <- read.csv("Y_train_2_XPXJDyy.csv", row.names = "ID")
cashPerOrder <- c(na.omit(df$cash_price1 + df$cash_price2 + df$cash_price3 + df$cash_price4
+df$cash_price5 + df$cash_price6 + df$cash_price7 + df$cash_price8
+df$cash_price9 + df$cash_price10 + df$cash_price11
+df$cash_price12 + df$cash_price13 + df$cash_price13
+df$cash_price14 + df$cash_price15 + df$cash_price16
+df$cash_price17 + df$cash_price18 + df$cash_price19
+df$cash_price20 + df$cash_price21 + df$cash_price22
+df$cash_price23 + df$cash_price24))
cashPerOrder
boxplot(cashPerOrder)
newYTrain <- c(na.omit(df2$ID, df2$fraud_flag))
newYTrain
newYTrain <- c(df2$ID, df2$fraud_flag)
newYTrain
as.data.frame(newYTrain)
newYTrain <- c(yTrain$ID, yTrain$fraud_flag)
newYTrain <- c(ytrain$ID, ytrain$fraud_flag)
newYTrain
newYTrain <- c(ytrain$ID, ytrain$fraud_flag)
newYTrain
newYTrain[112]
newYTrain[111]
newYTrain[111, 111]
